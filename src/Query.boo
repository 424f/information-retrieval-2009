# ------------------------------------------------------------------------------
# This code was automatically generated by Boo.Lang.CodeDom v.0.8.2.2960.
# 
#      Changes to this file may cause incorrect behavior and will be lost if 
#      the code is regenerated.
# ------------------------------------------------------------------------------

namespace IR
import System
import System.Collections.Generic

interface IQueryVisitor[of T]:
	def VisitAndQuery(andQuery as object, val as T) as T
	def VisitOrQuery(orQuery as object, val as T) as T
	def VisitNotQuery(notQuery as object, val as T) as T

class Query():
	[Property(Terms)]
	_terms as List[of string]

	public def constructor(terms as List[of string]):
		_terms = terms
		
class AndQuery(Query):

	public def constructor(terms as List[of string]):
		super(terms)

class OrQuery(Query):

	public def constructor(terms as List[of string]):
		super(terms)
		
class NotQuery(Query):

	public def constructor(terms as List[of string]):
		super(terms)


class QueryBuilder():
	enum QueryType:
		AND = 0
		OR = 1
		NOT = 2
		
	static public def Process(query as string):
		type as QueryType
		terms = List[of string]()

		for item in query.Split(Char.Parse(' ')):
			if item == "and":
				type = QueryType.AND
			elif item == "or":
				type = QueryType.OR
			elif item == "not":
				type = QueryType.NOT
			else:
				terms.Add(item)
		
		if type == QueryType.AND:
			return AndQuery(terms)
		if type == QueryType.OR:
			return OrQuery(terms)
		if type == QueryType.NOT:
			return NotQuery(terms)
		else:
			raise Exception("Malformed Query: " + query)


q = QueryBuilder.Process("HOT and LINE and PROPOSAL")
for term in  q.Terms:
	print term
